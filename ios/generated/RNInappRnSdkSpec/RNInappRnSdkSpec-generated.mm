/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNInappRnSdkSpec.h"


@implementation NativeInappRnSdkSpecBase
- (void)emitOnLogs:(NSString *_Nonnull)value
{
  _eventEmitterCallback("onLogs", value);
}
- (void)emitOnSessionLogs:(NSDictionary *)value
{
  _eventEmitterCallback("onSessionLogs", value);
}
- (void)emitOnSessionCreateRequest:(NSDictionary *)value
{
  _eventEmitterCallback("onSessionCreateRequest", value);
}
- (void)emitOnSessionUpdateRequest:(NSDictionary *)value
{
  _eventEmitterCallback("onSessionUpdateRequest", value);
}
- (void)emitOnProviderInformationRequest:(NSDictionary *)value
{
  _eventEmitterCallback("onProviderInformationRequest", value);
}
- (void)emitOnReclaimAttestorAuthRequest:(NSDictionary *)value
{
  _eventEmitterCallback("onReclaimAttestorAuthRequest", value);
}
- (void)emitOnSessionIdentityUpdate:(NSDictionary *)value
{
  _eventEmitterCallback("onSessionIdentityUpdate", value);
}

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end

@implementation RCTCxxConvert (NativeInappRnSdk_SessionInformation)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_SessionInformation:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::SessionInformation>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_Request)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_Request:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::Request>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_ProviderInformation)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_ProviderInformation:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::ProviderInformation>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_FeatureOptions)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_FeatureOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::FeatureOptions>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_LogConsumer)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_LogConsumer:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::LogConsumer>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_SessionManagement)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_SessionManagement:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::SessionManagement>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_ReclaimAppInfo)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_ReclaimAppInfo:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::ReclaimAppInfo>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_Overrides)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_Overrides:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::Overrides>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_VerificationOptions)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_VerificationOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::VerificationOptions>(json);
}
@end
@implementation RCTCxxConvert (NativeInappRnSdk_VerificationOptionsOptional)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_VerificationOptionsOptional:(id)json
{
  return facebook::react::managedPointer<JS::NativeInappRnSdk::VerificationOptionsOptional>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_startVerification(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "startVerification", @selector(startVerification:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_startVerificationFromUrl(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "startVerificationFromUrl", @selector(startVerificationFromUrl:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_setOverrides(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setOverrides", @selector(setOverrides:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_clearAllOverrides(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "clearAllOverrides", @selector(clearAllOverrides:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_setVerificationOptions(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "setVerificationOptions", @selector(setVerificationOptions:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_reply(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "reply", @selector(reply:reply:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_replyWithString(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "replyWithString", @selector(replyWithString:value:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_ping(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "ping", @selector(ping:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "addListener", @selector(addListener:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeInappRnSdkSpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeListeners", @selector(removeListeners:), args, count);
    }

  NativeInappRnSdkSpecJSI::NativeInappRnSdkSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["startVerification"] = MethodMetadata {1, __hostFunction_NativeInappRnSdkSpecJSI_startVerification};
        setMethodArgConversionSelector(@"startVerification", 0, @"JS_NativeInappRnSdk_Request:");
        
        methodMap_["startVerificationFromUrl"] = MethodMetadata {1, __hostFunction_NativeInappRnSdkSpecJSI_startVerificationFromUrl};
        
        
        methodMap_["setOverrides"] = MethodMetadata {1, __hostFunction_NativeInappRnSdkSpecJSI_setOverrides};
        setMethodArgConversionSelector(@"setOverrides", 0, @"JS_NativeInappRnSdk_Overrides:");
        
        methodMap_["clearAllOverrides"] = MethodMetadata {0, __hostFunction_NativeInappRnSdkSpecJSI_clearAllOverrides};
        
        
        methodMap_["setVerificationOptions"] = MethodMetadata {1, __hostFunction_NativeInappRnSdkSpecJSI_setVerificationOptions};
        setMethodArgConversionSelector(@"setVerificationOptions", 0, @"JS_NativeInappRnSdk_VerificationOptionsOptional:");
        
        methodMap_["reply"] = MethodMetadata {2, __hostFunction_NativeInappRnSdkSpecJSI_reply};
        
        
        methodMap_["replyWithString"] = MethodMetadata {2, __hostFunction_NativeInappRnSdkSpecJSI_replyWithString};
        
        
        methodMap_["ping"] = MethodMetadata {0, __hostFunction_NativeInappRnSdkSpecJSI_ping};
        
        
        methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeInappRnSdkSpecJSI_addListener};
        
        
        methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeInappRnSdkSpecJSI_removeListeners};
        
        eventEmitterMap_["onLogs"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["onSessionLogs"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["onSessionCreateRequest"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["onSessionUpdateRequest"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["onProviderInformationRequest"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["onReclaimAttestorAuthRequest"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["onSessionIdentityUpdate"] = std::make_shared<AsyncEventEmitter<id>>();
        setEventEmitterCallback([&](const std::string &name, id value) {
          static_cast<AsyncEventEmitter<id> &>(*eventEmitterMap_[name]).emit(value);
        });
  }
} // namespace facebook::react
