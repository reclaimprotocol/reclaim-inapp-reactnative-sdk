/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNInappRnSdkSpec symbols
#ifndef RNInappRnSdkSpec_H
#define RNInappRnSdkSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>


NS_ASSUME_NONNULL_BEGIN
namespace JS {
  namespace NativeInappRnSdk {
    struct SessionInformation {
      NSString *timestamp() const;
      NSString *sessionId() const;
      NSString *signature() const;

      SessionInformation(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_SessionInformation)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_SessionInformation:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct Request {
      NSString *appId() const;
      NSString *secret() const;
      NSString *providerId() const;
      std::optional<JS::NativeInappRnSdk::SessionInformation> session() const;
      NSString *contextString() const;
      id<NSObject> _Nullable parameters() const;
      std::optional<bool> acceptAiProviders() const;
      NSString *webhookUrl() const;

      Request(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_Request)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_Request:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct ProviderInformation {
      NSString *url() const;
      NSString *jsonString() const;
      bool canFetchProviderInformationFromHost() const;

      ProviderInformation(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_ProviderInformation)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_ProviderInformation:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct FeatureOptions {
      std::optional<bool> cookiePersist() const;
      std::optional<bool> singleReclaimRequest() const;
      std::optional<double> idleTimeThresholdForManualVerificationTrigger() const;
      std::optional<double> sessionTimeoutForManualVerificationTrigger() const;
      NSString *attestorBrowserRpcUrl() const;
      std::optional<bool> isAIFlowEnabled() const;

      FeatureOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_FeatureOptions)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_FeatureOptions:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct LogConsumer {
      bool enableLogHandler() const;
      std::optional<bool> canSdkCollectTelemetry() const;
      std::optional<bool> canSdkPrintLogs() const;

      LogConsumer(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_LogConsumer)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_LogConsumer:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct SessionManagement {
      std::optional<bool> enableSdkSessionManagement() const;

      SessionManagement(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_SessionManagement)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_SessionManagement:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct ReclaimAppInfo {
      NSString *appName() const;
      NSString *appImageUrl() const;
      std::optional<bool> isRecurring() const;

      ReclaimAppInfo(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_ReclaimAppInfo)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_ReclaimAppInfo:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct Overrides {
      std::optional<JS::NativeInappRnSdk::ProviderInformation> provider() const;
      std::optional<JS::NativeInappRnSdk::FeatureOptions> featureOptions() const;
      std::optional<JS::NativeInappRnSdk::LogConsumer> logConsumer() const;
      std::optional<JS::NativeInappRnSdk::SessionManagement> sessionManagement() const;
      std::optional<JS::NativeInappRnSdk::ReclaimAppInfo> appInfo() const;
      NSString *capabilityAccessToken() const;

      Overrides(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_Overrides)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_Overrides:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct VerificationOptions {
      bool canDeleteCookiesBeforeVerificationStarts() const;
      bool canUseAttestorAuthenticationRequest() const;
      NSString *claimCreationType() const;
      bool canAutoSubmit() const;
      bool isCloseButtonVisible() const;

      VerificationOptions(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_VerificationOptions)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_VerificationOptions:(id)json;
@end
namespace JS {
  namespace NativeInappRnSdk {
    struct VerificationOptionsOptional {
      std::optional<JS::NativeInappRnSdk::VerificationOptions> options() const;

      VerificationOptionsOptional(NSDictionary *const v) : _v(v) {}
    private:
      NSDictionary *_v;
    };
  }
}

@interface RCTCxxConvert (NativeInappRnSdk_VerificationOptionsOptional)
+ (RCTManagedPointer *)JS_NativeInappRnSdk_VerificationOptionsOptional:(id)json;
@end
@protocol NativeInappRnSdkSpec <RCTBridgeModule, RCTTurboModule>

- (void)startVerification:(JS::NativeInappRnSdk::Request &)request
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)startVerificationFromUrl:(NSString *)requestUrl
                         resolve:(RCTPromiseResolveBlock)resolve
                          reject:(RCTPromiseRejectBlock)reject;
- (void)setOverrides:(JS::NativeInappRnSdk::Overrides &)overrides
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)clearAllOverrides:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)setVerificationOptions:(JS::NativeInappRnSdk::VerificationOptionsOptional &)args
                       resolve:(RCTPromiseResolveBlock)resolve
                        reject:(RCTPromiseRejectBlock)reject;
- (void)reply:(NSString *)replyId
        reply:(BOOL)reply;
- (void)replyWithString:(NSString *)replyId
                  value:(NSString *)value;
- (void)ping:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject;

@end

@interface NativeInappRnSdkSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

- (void)emitOnLogs:(NSString *_Nonnull)value;
- (void)emitOnSessionLogs:(NSDictionary *)value;
- (void)emitOnSessionCreateRequest:(NSDictionary *)value;
- (void)emitOnSessionUpdateRequest:(NSDictionary *)value;
- (void)emitOnProviderInformationRequest:(NSDictionary *)value;
- (void)emitOnReclaimAttestorAuthRequest:(NSDictionary *)value;
- (void)emitOnSessionIdentityUpdate:(NSDictionary *)value;
@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeInappRnSdk'
   */
  class JSI_EXPORT NativeInappRnSdkSpecJSI : public ObjCTurboModule {
  public:
    NativeInappRnSdkSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline NSString *JS::NativeInappRnSdk::SessionInformation::timestamp() const
{
  id const p = _v[@"timestamp"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeInappRnSdk::SessionInformation::sessionId() const
{
  id const p = _v[@"sessionId"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeInappRnSdk::SessionInformation::signature() const
{
  id const p = _v[@"signature"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeInappRnSdk::Request::appId() const
{
  id const p = _v[@"appId"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeInappRnSdk::Request::secret() const
{
  id const p = _v[@"secret"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeInappRnSdk::Request::providerId() const
{
  id const p = _v[@"providerId"];
  return RCTBridgingToString(p);
}
inline std::optional<JS::NativeInappRnSdk::SessionInformation> JS::NativeInappRnSdk::Request::session() const
{
  id const p = _v[@"session"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeInappRnSdk::SessionInformation(p)));
}
inline NSString *JS::NativeInappRnSdk::Request::contextString() const
{
  id const p = _v[@"contextString"];
  return RCTBridgingToOptionalString(p);
}
inline id<NSObject> _Nullable JS::NativeInappRnSdk::Request::parameters() const
{
  id const p = _v[@"parameters"];
  return p;
}
inline std::optional<bool> JS::NativeInappRnSdk::Request::acceptAiProviders() const
{
  id const p = _v[@"acceptAiProviders"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeInappRnSdk::Request::webhookUrl() const
{
  id const p = _v[@"webhookUrl"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeInappRnSdk::ProviderInformation::url() const
{
  id const p = _v[@"url"];
  return RCTBridgingToOptionalString(p);
}
inline NSString *JS::NativeInappRnSdk::ProviderInformation::jsonString() const
{
  id const p = _v[@"jsonString"];
  return RCTBridgingToOptionalString(p);
}
inline bool JS::NativeInappRnSdk::ProviderInformation::canFetchProviderInformationFromHost() const
{
  id const p = _v[@"canFetchProviderInformationFromHost"];
  return RCTBridgingToBool(p);
}
inline std::optional<bool> JS::NativeInappRnSdk::FeatureOptions::cookiePersist() const
{
  id const p = _v[@"cookiePersist"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeInappRnSdk::FeatureOptions::singleReclaimRequest() const
{
  id const p = _v[@"singleReclaimRequest"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<double> JS::NativeInappRnSdk::FeatureOptions::idleTimeThresholdForManualVerificationTrigger() const
{
  id const p = _v[@"idleTimeThresholdForManualVerificationTrigger"];
  return RCTBridgingToOptionalDouble(p);
}
inline std::optional<double> JS::NativeInappRnSdk::FeatureOptions::sessionTimeoutForManualVerificationTrigger() const
{
  id const p = _v[@"sessionTimeoutForManualVerificationTrigger"];
  return RCTBridgingToOptionalDouble(p);
}
inline NSString *JS::NativeInappRnSdk::FeatureOptions::attestorBrowserRpcUrl() const
{
  id const p = _v[@"attestorBrowserRpcUrl"];
  return RCTBridgingToOptionalString(p);
}
inline std::optional<bool> JS::NativeInappRnSdk::FeatureOptions::isAIFlowEnabled() const
{
  id const p = _v[@"isAIFlowEnabled"];
  return RCTBridgingToOptionalBool(p);
}
inline bool JS::NativeInappRnSdk::LogConsumer::enableLogHandler() const
{
  id const p = _v[@"enableLogHandler"];
  return RCTBridgingToBool(p);
}
inline std::optional<bool> JS::NativeInappRnSdk::LogConsumer::canSdkCollectTelemetry() const
{
  id const p = _v[@"canSdkCollectTelemetry"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeInappRnSdk::LogConsumer::canSdkPrintLogs() const
{
  id const p = _v[@"canSdkPrintLogs"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<bool> JS::NativeInappRnSdk::SessionManagement::enableSdkSessionManagement() const
{
  id const p = _v[@"enableSdkSessionManagement"];
  return RCTBridgingToOptionalBool(p);
}
inline NSString *JS::NativeInappRnSdk::ReclaimAppInfo::appName() const
{
  id const p = _v[@"appName"];
  return RCTBridgingToString(p);
}
inline NSString *JS::NativeInappRnSdk::ReclaimAppInfo::appImageUrl() const
{
  id const p = _v[@"appImageUrl"];
  return RCTBridgingToString(p);
}
inline std::optional<bool> JS::NativeInappRnSdk::ReclaimAppInfo::isRecurring() const
{
  id const p = _v[@"isRecurring"];
  return RCTBridgingToOptionalBool(p);
}
inline std::optional<JS::NativeInappRnSdk::ProviderInformation> JS::NativeInappRnSdk::Overrides::provider() const
{
  id const p = _v[@"provider"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeInappRnSdk::ProviderInformation(p)));
}
inline std::optional<JS::NativeInappRnSdk::FeatureOptions> JS::NativeInappRnSdk::Overrides::featureOptions() const
{
  id const p = _v[@"featureOptions"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeInappRnSdk::FeatureOptions(p)));
}
inline std::optional<JS::NativeInappRnSdk::LogConsumer> JS::NativeInappRnSdk::Overrides::logConsumer() const
{
  id const p = _v[@"logConsumer"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeInappRnSdk::LogConsumer(p)));
}
inline std::optional<JS::NativeInappRnSdk::SessionManagement> JS::NativeInappRnSdk::Overrides::sessionManagement() const
{
  id const p = _v[@"sessionManagement"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeInappRnSdk::SessionManagement(p)));
}
inline std::optional<JS::NativeInappRnSdk::ReclaimAppInfo> JS::NativeInappRnSdk::Overrides::appInfo() const
{
  id const p = _v[@"appInfo"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeInappRnSdk::ReclaimAppInfo(p)));
}
inline NSString *JS::NativeInappRnSdk::Overrides::capabilityAccessToken() const
{
  id const p = _v[@"capabilityAccessToken"];
  return RCTBridgingToOptionalString(p);
}
inline bool JS::NativeInappRnSdk::VerificationOptions::canDeleteCookiesBeforeVerificationStarts() const
{
  id const p = _v[@"canDeleteCookiesBeforeVerificationStarts"];
  return RCTBridgingToBool(p);
}
inline bool JS::NativeInappRnSdk::VerificationOptions::canUseAttestorAuthenticationRequest() const
{
  id const p = _v[@"canUseAttestorAuthenticationRequest"];
  return RCTBridgingToBool(p);
}
inline NSString *JS::NativeInappRnSdk::VerificationOptions::claimCreationType() const
{
  id const p = _v[@"claimCreationType"];
  return RCTBridgingToString(p);
}
inline bool JS::NativeInappRnSdk::VerificationOptions::canAutoSubmit() const
{
  id const p = _v[@"canAutoSubmit"];
  return RCTBridgingToBool(p);
}
inline bool JS::NativeInappRnSdk::VerificationOptions::isCloseButtonVisible() const
{
  id const p = _v[@"isCloseButtonVisible"];
  return RCTBridgingToBool(p);
}
inline std::optional<JS::NativeInappRnSdk::VerificationOptions> JS::NativeInappRnSdk::VerificationOptionsOptional::options() const
{
  id const p = _v[@"options"];
  return (p == nil ? std::nullopt : std::make_optional(JS::NativeInappRnSdk::VerificationOptions(p)));
}
NS_ASSUME_NONNULL_END
#endif // RNInappRnSdkSpec_H
